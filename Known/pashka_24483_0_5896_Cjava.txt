import java.io.PrintWriter;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.util.Scanner;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
 /**
  * @author Pavel Mavrin
  * @id {Id}
  */
 public class C {
 
     static Scanner in;
     static PrintWriter out;
 
     public static void main(String[] args) throws FileNotFoundException {
         in = new Scanner(new File("input.txt"));
         out = new PrintWriter("output.txt");
         int n = in.nextInt();
         for (int i = 0; i < n; i++) {
             out.println("Case #" + (i + 1) + ": " + new C().solve());
         }
         out.close();
     }
 
     private Object solve() {
         int n = in.nextInt();
 
         BigInteger[][] c = new BigInteger[n + 1][n + 1];
         c[0][0] = BigInteger.ONE;
         for (int i = 1; i <= n; i++) {
             c[i][0] = BigInteger.ONE;
             c[i][i] = BigInteger.ONE;
             for (int j = 1; j < i; j++) {
                 c[i][j] = c[i - 1][j - 1].add(c[i - 1][j]);
             }
         }
 
         BigInteger q = BigInteger.ZERO;
         BigInteger w = BigInteger.ZERO;
 
         BigInteger TWO = BigInteger.valueOf(2);
         BigInteger THREE = BigInteger.valueOf(3);
         BigInteger FIVE = BigInteger.valueOf(5);
 
         for (int i = 0; i <= n; i++) {
             if ((n - i) % 2 == 0) {
                 q = q.add(c[n][i].multiply(THREE.pow(i)).multiply(FIVE.pow((n - i) / 2)));
             } else {
                 w = w.add(c[n][i].multiply(THREE.pow(i)).multiply(FIVE.pow((n - i) / 2)));
             }
         }
 
         BigInteger ww = w.multiply(w).multiply(FIVE);
         BigInteger lo = BigInteger.ZERO;
         BigInteger hi = ww;
         while (hi.subtract(lo).compareTo(BigInteger.ONE) > 0) {
             BigInteger m = lo.add(hi).divide(TWO);
             BigInteger mm = m.multiply(m);
             if (mm.compareTo(ww) > 0) hi = m; else lo = m;
         }
 
         BigInteger res = lo.add(q);
 
         String s = "00" + res.toString();
         s = s.substring(s.length() - 3, s.length());
         return s;
     }
 
     private long pow(long a, int n) {
         long res = 1;
         for (int i = 0; i < n; i++) res *= a;
         return res;
     }
 }