#include <cstdio>
 #include <algorithm>
 #include <vector>
 #include <queue>
 using namespace std;
 
 #define SZ(v) ((int)(v).size())
 #define PB push_back
 #define MP make_pair
 #define FOR(i,a,b) for(int i=(a);i<(b);++i)
 #define REP(i,n) FOR(i,0,n)
 #define FORE(i,a,b) for(int i=(a);i<=(b);++i)
 #define REPE(i,n) FORE(i,0,n)
 #define FORSZ(i,a,v) FOR(i,a,SZ(v))
 #define REPSZ(i,v) REP(i,SZ(v))
 
 
 const int MAX=10;
 
 int X,Y;
 char g[MAX][MAX];
 
 typedef struct S { int x,y,px1,py1,pd1,px2,py2,pd2,cost; } S;
 bool operator<(const S &a,const S &b) { return a.cost>b.cost; }
 int best[MAX][MAX][MAX][MAX][4][MAX][MAX][4];
 int move[MAX][MAX][MAX][MAX];
 
 const int DX[]={0,+1,0,-1},DY[]={+1,0,-1,0};
 
 void calcmove() {
 	REP(sx,X) REP(sy,Y) {
 		REP(xx,X) REP(yy,Y) move[sx][sy][xx][yy]=INT_MAX;
 		if(g[sx][sy]=='#') continue;
 		queue<pair<int,int> > q;
 		#define ADD1(x,y,cost) if(cost<move[sx][sy][x][y]) move[sx][sy][x][y]=cost,q.push(MP(x,y));
 		ADD1(sx,sy,0);
 		while(!q.empty()) {
 			int x=q.front().first,y=q.front().second; q.pop(); int cost=move[sx][sy][x][y];
 			REP(d,4) {
 				int nx=x+DX[d],ny=y+DY[d];
 				if(g[nx][ny]=='#') continue;
 				ADD1(nx,ny,cost+1);
 			}
 		}
 	}
 }
 
 void run(int casenr) {
 	scanf("%d%d",&X,&Y);
 	memset(g,'#',sizeof(g));
 	FORE(x,1,X) FORE(y,1,Y) do { scanf("%c",&g[x][y]); } while(g[x][y]!='.'&&g[x][y]!='#'&&g[x][y]!='X'&&g[x][y]!='O');
 	X+=2,Y+=2;
 //	REP(x,X) { REP(y,Y) printf("%c",g[x][y]); puts(""); }
 	int sx=-1,sy=-1; REP(x,X) REP(y,Y) if(g[x][y]=='O') sx=x,sy=y,g[x][y]='.'; assert(sx!=-1&&sy!=-1);
 	int tx=-1,ty=-1; REP(x,X) REP(y,Y) if(g[x][y]=='X') tx=x,ty=y,g[x][y]='.'; assert(tx!=-1&&ty!=-1);
 	int spx=sx,spy=sy; while(g[spx][spy]=='.') spx+=DX[0],spy+=DY[0];
 	
 //	calcmove();
 	
 	memset(best,-1,sizeof(best));
 	priority_queue<S> q;
 	#define ADD2(x,y,px1,py1,pd1,px2,py2,pd2,cost) if(best[x][y][px1][py1][pd1][px2][py2][pd2]==-1||cost<best[x][y][px1][py1][pd1][px2][py2][pd2]) best[x][y][px1][py1][pd1][px2][py2][pd2]=cost,q.push((S){x,y,px1,py1,pd1,px2,py2,pd2,cost});
 	ADD2(sx,sy,spx,spy,0,spx,spy,0,0);
 	while(!q.empty()) {
 		int x=q.top().x,y=q.top().y,px1=q.top().px1,py1=q.top().py1,pd1=q.top().pd1,px2=q.top().px2,py2=q.top().py2,pd2=q.top().pd2,cost=q.top().cost; q.pop();
 //		printf("%d %d %d %d %d = %d\n",x,y,px,py,pd,cost);
 		if(cost>best[x][y][px1][py1][pd1][px2][py2][pd2]) continue;
 		if(x==tx&&y==ty) {
 			printf("Case #%d: %d\n",casenr,cost);
 			return;
 		}
 		REP(d,4) {
 			//move
 			int nx=x+DX[d],ny=y+DY[d];
 			if(g[nx][ny]!='#') ADD2(nx,ny,px1,py1,pd1,px2,py2,pd2,cost+1);
 			if(nx==px1&&ny==py1&&d==pd1) ADD2(px2-DX[pd2],py2-DY[pd2],px1,py1,pd1,px2,py2,pd2,cost+1);
 			if(nx==px2&&ny==py2&&d==pd2) ADD2(px1-DX[pd1],py1-DY[pd1],px1,py1,pd1,px2,py2,pd2,cost+1);
 				
 			//shoot
 			int npx=x,npy=y;
 			while(g[npx][npy]=='.') npx+=DX[d],npy+=DY[d];
 			//shoot and replace
 			ADD2(x,y,npx,npy,d,px2,py2,pd2,cost);
 			ADD2(x,y,px1,py1,pd1,npx,npy,d,cost);
 		}
 	}
 	printf("Case #%d: THE CAKE IS A LIE\n",casenr);
 }
 
 int main() {
 	int n; scanf("%d",&n); FORE(i,1,n) run(i);
 	return 0;
 }
